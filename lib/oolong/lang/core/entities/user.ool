type
  userStatus : ['inactive', 'active', 'disabled', 'forbidden', 'deleted']

entity user
  with
    autoId
    createTimestamp
    updateTimestamp
    logicalDeletion
    atLeastOneNotNull(email, mobile)
    validateAllFieldsOnCreation

  has
    email
    mobile
    # @existing (existing data in db), @new (new data in db, or ready to put in db), @raw (raw input)
    password | hashPassword(@new.passwordSalt)
    passwordSalt : text(32) fixed default(auto) readOnly
    displayName : name optional
    emailVerified : flag default(false)
    mobileVerified : flag default(false)
    status : userStatus default('inactive')
    tag optional

  index
    email is unique
    mobile is unique

  interface
    checkUserCredential
      accept
        identity
        password | hashPassword(@user.passwordSalt)
      populate user by select user.* where email = @identity or mobile = @identity
      # set hashedPassword <- @password
      return { data: user } unless
        @user not exists -> { error: 'user not found' }
        @password != @user.password -> { error: 'invalid password' }